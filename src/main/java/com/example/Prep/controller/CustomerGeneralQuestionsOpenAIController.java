package com.example.Prep.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.image.ImageModel;
import org.springframework.ai.image.ImageOptions;
import org.springframework.ai.image.ImageOptionsBuilder;
import org.springframework.ai.image.ImagePrompt;
import org.springframework.ai.image.ImageResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.Prep.constants.Constants;
import com.example.Prep.dto.request.ai.ChatGenRequest;
import com.example.Prep.dto.request.ai.ImageGenRequest;

/**
 * This is a controller class which act as an entey-point for the
 * spring-applications.
 * 
 * @author Manas Vishnoi
 */
@RestController
public class CustomerGeneralQuestionsOpenAIController {

	private static final Logger logger = LoggerFactory.getLogger(CustomerGeneralQuestionsOpenAIController.class);

	private final ImageModel imageModel;
	private final ChatModel chatModel;

	// Constructor based dependency
	public CustomerGeneralQuestionsOpenAIController(ImageModel imageModel, ChatModel chatModel) {
		this.imageModel = imageModel;
		this.chatModel = chatModel;
	}

	/**
	 * This API takes request for creating a picture as per user request and then
	 * returns a user with a URL which has generated picture.
	 * 
	 * @param imageGenRequest
	 * @return String
	 */
	@GetMapping(path = Constants.OPEN_AI_IMAGE_GENERATION_URL)
	public String generateImageUsingOpenAI(@RequestBody ImageGenRequest imageGenRequest) {

		logger.debug("Entered the generateImageUsingOpenAI method()");
		ImageOptions imageOptions = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).withModel("dall-e-3")
				.build();

		logger.debug("Generate image for the request:" + imageGenRequest.prompt());
		ImagePrompt imagePrompt = new ImagePrompt(imageGenRequest.prompt(), imageOptions);

		ImageResponse response = imageModel.call(imagePrompt);
		logger.debug("The response:" + response);

		return "redirect:" + response.getResult().getOutput().getUrl();
	}

	/**
	 * This API takes request and then generate response for the user request.
	 * 
	 * @param chatGenRequest
	 * @return String
	 */
	@GetMapping(path = Constants.OPEN_AI_CHAT_RESPONSE_URL)
	public String generateAnswerUsingOpenAI(@RequestBody ChatGenRequest chatGenRequest) {

		logger.debug("Entered generateAnswerUsingOpenAI method()");
		logger.debug("request entered by the user:" + chatGenRequest.prompt());
		String response = chatModel.call(chatGenRequest.prompt());
		logger.debug("Response generated by the chatGPT:" + response);

		return response;
	}

}
